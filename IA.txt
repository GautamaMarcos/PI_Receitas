



import React from 'react';
import './Receita.css';

const Receita = ({ receita, error, avaliacaoEnviada, handleAvaliar, handleBack, nota, setNota, comentario, setComentario, mensagem }) => {
  return (
    <div className="receita-container">
      <div className="receita-section">
        <h1 className="receita-h1">{receita.titulo}</h1>
        <p className="receita-descricao">{receita.descricao}</p>
      </div>
      <div className="receita-section">
        <h2 className="receita-h2">Ingredientes</h2> 
        <pre className="receita-ingredientes receita-texto-com-margem">{receita.ingredientes}</pre>
      </div>
      <div className="receita-section">
        <h2 className="receita-h2">Modo de Preparo</h2>
        <pre className="receita-modo-de-preparo receita-texto-com-margem">{receita.modo_de_preparo}</pre>
      </div>
      <div className="receita-avaliacao-section">
        <h2 className="receita-h2">Avaliar Receita</h2>
        {/* <p style={{ color: 'green' }}>{mensagem}</p> */}
        {error && <p style={{ color: 'red' }}>{error}</p>} 
        {!avaliacaoEnviada ? (
          <form onSubmit={handleAvaliar} className="receita-avaliacao-form">
            <input
              type="number"
              min="1"
              max="5"
              value={nota}
              onChange={(e) => setNota(parseInt(e.target.value))}
              required
              className="receita-nota-input"
            />
            <textarea
              value={comentario}
              onChange={(e) => setComentario(e.target.value)}
              placeholder="Deixe um comentário"
              required
              className="receita-comentario-textarea"
            />
            <div className="receita-button-container">
              <button type="submit" className="receita-btn">Avaliar</button>
              <button type="button" onClick={handleBack} className="receita-btn">Voltar</button>
            </div>
          </form>
        ) : (
          <p style={{ color: 'green' }}>{mensagem}</p>
        )}
      </div>
    </div>
  );
};

export default Receita;

















/////////////////////////////////////////////
 ////////////////////////////////////////////
 Receita.tsx
 return (
    <div className="receita-container">
      <div className="receita-section">
        <h1>{receita.titulo}</h1>
        <p className="texto-com-margem">{receita.descricao}</p>
      </div>
      <div className="receita-section">
        <h2>Ingredientes</h2> 
        <pre className="ingredientes texto-com-margem">{receita.ingredientes}</pre>
      </div>
      <div className="receita-section">
        <h2>Modo de Preparo</h2>
        <pre className="modo-de-preparo texto-com-margem">{receita.modo_de_preparo}</pre>
      </div>
      <div className="avaliacao-section">
        <h2>Avaliar Receita</h2>
        {/* <p style={{ color: 'green' }}>{mensagem}</p> */}
        {error && <p style={{ color: 'red' }}>{error}</p>} 
        {!avaliacaoEnviada ? (
          <form onSubmit={handleAvaliar} className="avaliacao-form">
            <input
              type="number"
              min="1"
              max="5"
              value={nota}
              onChange={(e) => setNota(parseInt(e.target.value))}
              required
              className="nota-input"
            />
            <textarea
              value={comentario}
              onChange={(e) => setComentario(e.target.value)}
              placeholder="Deixe um comentário"
              required
              className="comentario-textarea"
            />
            <div className="button-container">
              <button type="submit" className="btn">Avaliar</button>
              <button type="button" onClick={handleBack} className="btn">Voltar</button>
            </div>
          </form>
        ) : (
          <p style={{ color: 'green' }}>{mensagem}</p>
        )}
      </div>
    </div>
  );
};
export default Receita;


//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

Receita.css
.archivo-black-regular {
  font-family: "Archivo Black", sans-serif;
  font-weight: 400;
  font-style: normal;
}


.receita-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 0 auto;
  max-width: 800px;
  padding: 20px;
  color: white; /* Define a cor da fonte como branca */
  font-family: sans-serif;
}

.receita-section {
  width: 100%;
  margin-bottom: 20px;
  font-size: 16px;
  font-family: sans-serif;
}

.ingredientes, .modo-de-preparo {
  white-space: pre-wrap; /* Mantém a formatação original do texto */
  text-align: left;
  margin-left: 10px; /* Adiciona margem esquerda de 10px */
}

.avaliacao-section {
  width: 100%;
  text-align: center;
}

.avaliacao-form {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.nota-input {
  width: 50px; /* Estreitar o campo de entrada para o número */
  margin-bottom: 10px;
}

.comentario-textarea {
  width: 100%;
  max-width: 400px;
  margin-bottom: 10px;
  font-family: sans-serif;
}

.button-container {
  display: flex;
  justify-content: space-between;
  width: 100%;
  max-width: 400px;
}

.btn {
  padding: 10px 20px;
  font-size: 16px;
  border: none;
  border-radius: 4px;
  background-color: #007bff;
  color: white;
  cursor: pointer;
  margin-top: 10px;
}

.btn:hover {
  background-color: #0056b3;
}

h2 {
  text-align: left; /* Alinha os títulos à esquerda */
  margin-left: 10px; /* Adiciona margem esquerda de 10px */
}

.texto-com-margem {
  margin-left: 10px; /* Adiciona margem esquerda de 10px */
}

/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////

Login.tsx
return (
    <div
      className="login-container"
      style={{ backgroundImage: `url(${backgroundImage})`, backgroundSize: 'cover', backgroundPosition: 'center' }} // Use a imagem no estilo inline }} // Use a imagem no estilo inline
    >
      <h1>Login</h1>
      {error && <p style={{ color: 'red' }}>{error}</p>}
      <form onSubmit={handleLogin}>
        <div className="input-container">
          <label>Username:</label>
          <input
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
        </div>
        <div className="input-container">
          <label>Password:</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </div>
        <button type="submit">Login</button>
      </form>
    </div>
  );
};


export default Login;


//////////////////////////////////////////////
//////////////////////////////////////////////

Login.css

body, html {
    height: 100%;
    margin: 0;
  }
  
  .login-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
     /*background-image: url('');*/ /* Caminho para a imagem de fundo */
    background-size: cover;
    background-position: center;
    margin-top: 10px; /* Adiciona a margem superior */
  }
  
  h1 {
    margin-bottom: 20px; /* Adiciona espaço entre o título e o formulário */
  }
  
  form {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .input-container {
    margin-bottom: 15px;
  }
  
  input {
    width: 200px; /* Ajuste o tamanho conforme necessário */
    padding: 10px;
    margin-top: 5px;
  }
  
  button {
    padding: 10px 20px;
  }
  

///////////////////////////////////////////////////////
///////////////////////////////////////////////////////

ReceitasList.tsx

<style>
@import url('https://fonts.googleapis.com/css2?family=Archivo+Black&display=swap');
</style>
  return (
    
    <div className="receitas-container">  
      <h1 className="titulo">Receitas</h1>
      {error && <div className="error">{error}</div>}
      {/* {mensagem && <div className="mensagem">{mensagem}</div>} */}
      
      <div className="actions">
        <Link to="/adicionar-receita" className="btn">Adicionar Receita</Link>
        <Link to="/adicionar-categoria" className="btn">Adicionar Categoria</Link>
        <Link to="/adicionar-subcategoria" className="btn">Adicionar Subcategoria</Link>
      </div>
      
      <div className="filtros">
        <select onChange={handleFiltrarCategoria} value={categoriaFiltro || ''}>
          <option value="">Todas as Categorias</option>
          {categorias.map((categoria) => (
            <option key={categoria.id} value={categoria.id}>{categoria.nome}</option>
          ))}
        </select>
        
        <select onChange={handleFiltrarSubcategoria} value={subcategoriaFiltro || ''}>
          <option value="">Todas as Subcategorias</option>
          {subcategorias.map((subcategoria) => (
            <option key={subcategoria.id} value={subcategoria.id}>{subcategoria.nome}</option>
          ))}
        </select>
      </div>
      
      <div className="receitas-lista">
        <div className="receitas-scroll">
          {receitasFiltradas.map((receita) => (
            <div key={receita.uuid} className="receita-item">
              <div className="receita-info">
                <Link to={`/receita/${receita.uuid}`} className="receita-titulo">{receita.titulo}</Link>
                <div className="receita-acoes">
                  <Link to={`/modificar-receita/${receita.uuid}`} className="btnModificar">Modificar</Link>
                  <button className="btnExcluir" onClick={() => confirmDelete(receita.uuid)}>Excluir</button>
                </div>
              </div>
              {receitaToDelete === receita.uuid && (
                <div className="confirm-delete">
                  <p>Deseja realmente deletar a receita?</p>
                  <button className="btn" onClick={() => handleDelete(receita.uuid)}>Confirmar</button>
                  <button className="btn" onClick={cancelDelete}>Voltar</button>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default ReceitasList;



///////////////////////////////////////////////////////
///////////////////////////////////////////////////////

ReceitasList.css

body, html {
  height: 100%;
  margin: 0;
  background-image: url('../assets/images/receita_list.jpeg'); /* Caminho para a imagem de fundo */
  background-size: cover;
  background-position: center;
}

.receitas-container {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  width: 50%; /* Metade esquerda da página */
  padding: 20px;
}

.titulo { 
  color: white; /* Define a cor do título como branca */
}

.actions {
  margin-bottom: 20px;
}

.btn {
  margin-right: 10px;
  margin-bottom: 10px;
  text-decoration: none;
  color: white;
  background-color: #007bff;
  padding: 5px 10px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.btnModificar {
  margin-right: 10px;
  margin-bottom: 10px;
  text-decoration: none;
  color: white;
  background-color: #007bff;
  padding: 2px 4px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.btnExcluir {
  margin-right: 10px;
  margin-bottom: 10px;
  text-decoration: none;
  color: white;
  background-color: #ce0e0e;
  padding: 2px 4px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.btn:hover {
  background-color: #0056b3;
}

.filtros {
  display: flex;
  gap: 10px; /* Espaço de 10px entre os filtros */
  margin-bottom: 20px;
}

.filtros select {
  padding: 5px;
  width: 50%; /* Reduz a largura pela metade */
}

.receitas-lista {
  margin-top: 20px;
}

.receitas-scroll {
  max-height: 400px;
  overflow-y: auto;
  
}

.receita-item {
  display: flex;
  flex-direction: column;
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  background-color: rgb(214, 206, 206);
}

.receita-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.receita-titulo {
  flex: 1;
  text-align: left;
  margin-right: 10px;
  
}

.receita-acoes {
  display: flex;
  gap: 10px;
  position: sticky;
  right: 0;
}


///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
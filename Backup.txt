from django.db import models

# Create your models here.
# receitas_app/models.py
from django.contrib.auth.models import User
import uuid

class Receita(models.Model):
    uuid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    titulo = models.CharField(max_length=255)
    descricao = models.TextField()
    ingredientes = models.TextField()
    modo_de_preparo = models.TextField()
    categoria = models.CharField(max_length=100)
    avaliacao = models.IntegerField(default=0)
    autor = models.ForeignKey(User, on_delete=models.CASCADE,related_name='receitas')

    def __str__(self):
        return self.titulo

class Avaliacao(models.Model):
    receita = models.ForeignKey(Receita, on_delete=models.CASCADE,related_name='avaliacoes')
    usuario = models.ForeignKey(User, on_delete=models.CASCADE,related_name='avaliacoes')
    nota = models.IntegerField()
    comentario = models.TextField()

    def __str__(self):
        return f"{self.usuario} avaliou {self.receita} com nota {self.nota}"


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////


# receitas_app/serializers.py
from rest_framework import serializers
from .models import Receita, Avaliacao
from django.contrib.auth.models import User

class ReceitaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Receita
        fields = '__all__'

class AvaliacaoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Avaliacao
        fields = '__all__'

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'username', 'email','password')
        extra_kwargs = {
            'password': {'write_only': True},
        }

    def create(self, validated_data):
        user = User.objects.create_user(**validated_data)
        return user


//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
urls.py do projeto

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api-auth/', include('rest_framework.urls')),  # URLs do Django REST Framework
    path('api/', include('aplicativo_receitas.urls')),  # URLs do aplicativo de receitas
]

//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////

urls.py do aplicativo

from django.urls import path, include
from rest_framework import routers
from .views import ReceitaViewSet, AvaliacaoViewSet, UserViewSet

router = routers.DefaultRouter()
router.register(r'receitas', ReceitaViewSet)
router.register(r'avaliacoes', AvaliacaoViewSet)
router.register(r'users', UserViewSet)

urlpatterns = [
    path('', include(router.urls)),
    path('users/login/', UserViewSet.as_view({'post': 'login'}), name='user-login'),
    path('users/register/', UserViewSet.as_view({'post': 'create'}), name='user-register'),
]

//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////

# views.py

from django.shortcuts import render
from rest_framework import viewsets, permissions
from rest_framework.response import Response
from .models import Receita, Avaliacao
from .serializers import ReceitaSerializer, AvaliacaoSerializer, UserSerializer
from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework.authentication import TokenAuthentication
from rest_framework.permissions import IsAuthenticated
from django.contrib.auth.models import User
from django.contrib.auth import authenticate
from rest_framework.authtoken.models import Token

class ReceitaViewSet(viewsets.ModelViewSet):
    queryset = Receita.objects.all()
    serializer_class = ReceitaSerializer
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def perform_create(self, serializer):
        serializer.save(autor=self.request.user)

    def destroy(self, request, *args, **kwargs):
        receita = self.get_object()
        if receita.autor != request.user:
            return Response({"error": "Você não pode excluir essa receita."}, status=403)
        self.perform_destroy(receita)
        return Response(status=204)

class AvaliacaoViewSet(viewsets.ModelViewSet):
    queryset = Avaliacao.objects.all()
    serializer_class = AvaliacaoSerializer
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def perform_create(self, serializer):
        receita = Receita.objects.get(uuid=self.request.data['receita'])
        if Avaliacao.objects.filter(receita=receita, usuario=self.request.user).exists():
            return Response({"error": "Você já avaliou essa receita."}, status=400)
        serializer.save(receita=receita, usuario=self.request.user)

class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def list(self, request):
        if request.user.is_authenticated:
            return Response({"user": UserSerializer(request.user).data})
        return Response({"error": "Unauthorized"}, status=401)

    def create(self, request):
        serializer = UserSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            token = Token.objects.get_or_create(user=user)
            return Response({
                "token": token.key,
                "user": UserSerializer(user).data,
            })
        return Response(serializer.errors, status=400)

    def login(self, request):
        username = request.data.get('username')
        password = request.data.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            token = Token.objects.get_or_create(user=user)
            return Response({
                "token": token.key,
                "user": UserSerializer(user).data,
            })
        return Response({"error": "Invalid credentials"}, status=400)


/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

from pathlib import Path
from datetime import datetime, timedelta 
from django.conf import settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vw$+ke%v$1y2bwlwxdkhqm07y4$c0gxqnjgj7%0!l^yc^aq9t!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'aplicativo_receitas',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'projeto_receitas.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'projeto_receitas.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Configure o JWT no 'settings.py'

SIMPLE_JWT = { 
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5), 
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7), 
    'ROTATE_REFRESH_TOKENS': False, 
    'BLACKLIST_AFTER_ROTATION': True, 
    'UPDATE_LAST_LOGIN': False,
    'ALGORITHM': 'HS256', 
    'SIGNING_KEY': 'your_secret_key', 
    'VERIFYING_KEY': None, 
    'AUDIENCE': None, 
    'ISSUER': None, 
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id', 
    'USER_ID_CLAIM': 'user_id', 
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',), 
    'TOKEN_TYPE_CLAIM': 'token_type', 
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp', 
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5), 
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7), }

# JWT_AUTH = {
#     'JWT_ENCODE_HANDLER':
#     'rest_framework_jwt.utils.jwt_encode_handler',
#     'JWT_DECODE_HANDLER':
#     'rest_framework_jwt.utils.jwt_decode_handler',
#     'JWT_PAYLOAD_HANDLER':
#     'rest_framework_jwt.utils.jwt_payload_handler',
#     'JWT_SECRET_KEY':
#     'your_secret_key',
#     'JWT_ALGORITHM':
#     'HS256',
#     'JWT_VERIFY':
#     True,
#     'JWT_VERIFY_EXPIRATION':
#     True,
#     'JWT_EXPIRATION_DELTA':
#     timedelta(minutes=5),
#     'JWT_AUDIENCE':
#     None,
#     'JWT_ISSUER':
#     None,
#     'JWT_ALLOW_REFRESH':
#     False,
#     'JWT_REFRESH_EXPIRATION_DELTA':
#     timedelta(days=7),
# }
REST_FRAMEWORK = { 
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication', ),
    'DEFAULT_PERMISSION_CLASSES': (
'rest_framework.permissions.IsAuthenticated', ),
}
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

FRONTEND

/components

Login

import React, { useState } from 'react';
import axios from 'axios';
import { Navigate, useNavigate } from 'react-router-dom';

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:8000/api/users/login/', {
        username,
        password,
      });
      localStorage.setItem('token', response.data.token);
      navigate('/receitas');
    } catch (error) {
      setError('Invalid credentials');
    }
  };

  return (
    <div>
      <h1>Login</h1>
      {error && <p style={{ color: 'red' }}>{error}</p>}
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <button type="submit">Login</button>
      </form>
    </div>
  );
};

export default Login;

//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////

Receita.tsx

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';

interface Receita {
  uuid: string;
  titulo: string;
  descricao: string;
  ingredientes: string;
  modo_de_preparo: string;
  categoria: string;
}

const Receita = () => {
  const { uuid } = useParams<{ uuid: string }>();
  const [receita, setReceita] = useState<Receita | null>(null);
  const [nota, setNota] = useState(0);
  const [avaliacaoEnviada, setAvaliacaoEnviada] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchReceita = async () => {
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/'); // Redirecionar para a página de login se o token não estiver presente
        return;
      }
      const response = await axios.get(`http://localhost:8000/api/receitas/${uuid}/`, {
        headers: {
          Authorization: `JWT ${token}`,
        },
      });
      setReceita(response.data);
    };

    fetchReceita();
  }, [uuid, navigate]);

  const handleAvaliar = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const token = localStorage.getItem('token');
    await axios.post(`http://localhost:8000/api/avaliacoes/`, {
      receita: uuid,
      nota,
    }, {
      headers: {
        Authorization: `JWT ${token}`,
      },
    });
    setAvaliacaoEnviada(true);
  };

  if (!receita) {
    return <div>Carregando...</div>;
  }

  return (
    <div>
      <h1>{receita.titulo}</h1>
      <p>{receita.descricao}</p>
      <h2>Ingredientes</h2>
      <ul>
        {receita.ingredientes.split(',').map((ingrediente, index) => (
          <li key={index}>{ingrediente.trim()}</li>
        ))}
      </ul>
      <h2>Modo de Preparo</h2>
      <p>{receita.modo_de_preparo}</p>
      <h2>Avaliar Receita</h2>
      {!avaliacaoEnviada ? (
        <form onSubmit={handleAvaliar}>
          <input
            type="number"
            min="1"
            max="5"
            value={nota}
            onChange={(e) => setNota(parseInt(e.target.value))}
            required
          />
          <button type="submit">Avaliar</button>
        </form>
      ) : (
        <p>Avaliação enviada!</p>
      )}
    </div>
  );
};

export default Receita;

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

ReceitasList.tsx

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link, useNavigate } from 'react-router-dom';

interface Receita {
  uuid: string;
  titulo: string;
  categoria: string;
}

const ReceitasList = () => {
  const [receitas, setReceitas] = useState<Receita[]>([]);
  const [categoriaFiltro, setCategoriaFiltro] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchReceitas = async () => {
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/'); // Redirecionar para a página de login se o token não estiver presente
        return;
      }
      const response = await axios.get('http://localhost:8000/api/receitas/', {
        headers: {
          Authorization: `JWT ${token}`,
        },
      });
      setReceitas(response.data);
    };

    fetchReceitas();
  }, []);

  const handleFiltrarCategoria = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setCategoriaFiltro(e.target.value);
  };

  const receitasFiltradas = receitas.filter((receita) => {
    if (categoriaFiltro === '') return true;
    return receita.categoria === categoriaFiltro;
  });

  return (
    <div>
      <h1>Receitas</h1>
      <select value={categoriaFiltro} onChange={handleFiltrarCategoria}>
        <option value="">Todas as Categorias</option>
        <option value="sobremesa">Sobremesa</option>
        <option value="prato_principal">Prato Principal</option>
        {/* Adicione mais opções de categorias conforme necessário */}
      </select>
      <ul>
        {receitasFiltradas.map((receita) => (
          <li key={receita.uuid}>
            <Link to={`/receitas/${receita.uuid}`}>{receita.titulo}</Link>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ReceitasList;

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

App.tsx

import React from 'react';
import Routes from './routes';

function App() {
  return (
    <div className="App">
      <Routes />
    </div>
  );
}

export default App;

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

routes.tsx

import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Login from './components/Login';
import ReceitasList from './components/ReceitasList';
import Receita from './components/Receita';

const AppRouter = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Login />} />
        <Route path="/receitas" element={<ReceitasList />} />
        <Route path="/receitas/:uuid" element={<Receita />} />
      </Routes>
    </Router>
  );
};

export default AppRouter;
